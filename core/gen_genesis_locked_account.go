// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*lockedAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (l LockedAccount) MarshalJSON() ([]byte, error) {
	type LockedAccount struct {
		UserAddress  common.Address        `json:"userAddress,omitempty"`
		TypeId       *math.HexOrDecimal256 `json:"typeId,omitempty"`
		LockedAmount *math.HexOrDecimal256 `json:"lockedAmount,omitempty"`
		LockedTime   *math.HexOrDecimal256 `json:"lockedTime,omitempty"`
		PeriodAmount *math.HexOrDecimal256 `json:"periodAmount,omitempty"`
	}
	var enc LockedAccount
	enc.UserAddress = l.UserAddress
	enc.TypeId = (*math.HexOrDecimal256)(l.TypeId)
	enc.LockedAmount = (*math.HexOrDecimal256)(l.LockedAmount)
	enc.LockedTime = (*math.HexOrDecimal256)(l.LockedTime)
	enc.PeriodAmount = (*math.HexOrDecimal256)(l.PeriodAmount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (l *LockedAccount) UnmarshalJSON(input []byte) error {
	type LockedAccount struct {
		UserAddress  *common.Address       `json:"userAddress,omitempty"`
		TypeId       *math.HexOrDecimal256 `json:"typeId,omitempty"`
		LockedAmount *math.HexOrDecimal256 `json:"lockedAmount,omitempty"`
		LockedTime   *math.HexOrDecimal256 `json:"lockedTime,omitempty"`
		PeriodAmount *math.HexOrDecimal256 `json:"periodAmount,omitempty"`
	}
	var dec LockedAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.UserAddress != nil {
		l.UserAddress = *dec.UserAddress
	}
	if dec.TypeId != nil {
		l.TypeId = (*big.Int)(dec.TypeId)
	}
	if dec.LockedAmount != nil {
		l.LockedAmount = (*big.Int)(dec.LockedAmount)
	}
	if dec.LockedTime != nil {
		l.LockedTime = (*big.Int)(dec.LockedTime)
	}
	if dec.PeriodAmount != nil {
		l.PeriodAmount = (*big.Int)(dec.PeriodAmount)
	}
	return nil
}
